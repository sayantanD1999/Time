{"version":3,"sources":["component/Images/day.jpg","component/Images/night.jpg","component/Images/evening.jpg","component/Clock.js","App.js","index.js"],"names":["Clock","useState","date","setDate","hour","setHour","minutes","setMiniutes","location","setLocation","time_zone","setTime_zone","greetings","setGreetings","icon","setIcon","background","setBackground","quotes","setQuotes","speaker","setSpeaker","setInterval","t","Date","h","getHours","m","getMinutes","day","eve","night","window","onload","navigator","geolocation","getCurrentPosition","successfulLookup","failure","alert","position","coords","latitude","longitude","fetch","then","response","json","data","showLocation","console","log","results","annotations","timezone","name","short_name","d","getDate","month","getMonth","year","getFullYear","className","style","backgroundImage","id","onClick","document","getElementById","classList","add","setTimeout","remove","quotesArr","thoughts","Map","i","length","set","x","Math","floor","random","n","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.350bff18.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/day.9c074ae1.jpg\";","export default __webpack_public_path__ + \"static/media/night.1cf3a1b1.jpg\";","export default __webpack_public_path__ + \"static/media/evening.5476cff4.jpg\";","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { BiMoon, BiSun } from \"react-icons/bi\";\r\nimport { AiOutlineReload } from \"react-icons/ai\";\r\nimport day from \"../component/Images/day.jpg\";\r\nimport night from \"../component/Images/night.jpg\";\r\nimport eve from \"../component/Images/evening.jpg\";\r\n\r\nfunction Clock() {\r\n  const [date, setDate] = useState(\"\");\r\n  const [hour, setHour] = useState(\"\");\r\n  const [minutes, setMiniutes] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [time_zone, setTime_zone] = useState(\"\");\r\n  const [greetings, setGreetings] = useState(\"\");\r\n  const [icon, setIcon] = useState(\"\");\r\n  const [background, setBackground] = useState(\" \");\r\n  const [quotes, setQuotes] = useState(\r\n    \"When the going gets tough, the tough get going\"\r\n  );\r\n  const [speaker, setSpeaker] = useState(\"Joe Kennedy\");\r\n\r\n  const getRandomQuotes = () => {\r\n    document.getElementById(\"rel\").classList.add(\"reload\");\r\n    setTimeout(function () {\r\n      var x = document.getElementById(\"rel\");\r\n      x.classList.remove(\"reload\");\r\n    }, 10);\r\n\r\n    var quotesArr = [\r\n      \"When the going gets tough, the tough get going\",\r\n      \"Opportunities don’t happen, you create them.\",\r\n      \"Don’t wait for your feelings to change to take the action. Take the action and your feelings will change.\",\r\n    ];\r\n    var speaker = [\"Joe Kennedy\", \"Chris Grosser\", \"Barbara Baron\"];\r\n\r\n    var thoughts = new Map();\r\n\r\n    for (let i = 0; i < speaker.length; i++) {\r\n      thoughts.set(quotesArr[i], speaker[i]);\r\n    }\r\n    console.log(thoughts);\r\n    let x = Math.floor(Math.random() * quotesArr.length);\r\n    let n = quotesArr[x];\r\n    console.log(x);\r\n    setQuotes(n);\r\n    let q = speaker[x];\r\n    setSpeaker(q);\r\n  };\r\n\r\n  setInterval(function () {\r\n    var t = new Date();\r\n    var h = t.getHours();\r\n    var m = t.getMinutes();\r\n    // var s = t.getSeconds();\r\n    // setSec(s);\r\n    if (h < 10) {\r\n      setHour(\"0\" + h);\r\n    } else {\r\n      setHour(h);\r\n    }\r\n\r\n    if (m < 10) {\r\n      setMiniutes(\"0\" + m);\r\n    } else {\r\n      setMiniutes(m);\r\n    }\r\n\r\n    if (h >= 3 && h < 12) {\r\n      setGreetings(\"GOOD MORNING\");\r\n      setIcon(<BiSun />);\r\n      setBackground(day);\r\n    } else if (h >= 12 && h < 16) {\r\n      setGreetings(\"GOOD AFTERNOON\");\r\n      setIcon(<BiSun />);\r\n      setBackground(day);\r\n    } else if (h >= 16 && h <= 19) {\r\n      setGreetings(\"GOOD EVENING\");\r\n      setIcon(<BiMoon />);\r\n      setBackground(eve);\r\n    } else {\r\n      setGreetings(\"GOOD EVENING\");\r\n      setIcon(<BiMoon />);\r\n      setBackground(night);\r\n    }\r\n  }, 1000);\r\n\r\n  window.onload = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(successfulLookup, failure);\r\n    } else {\r\n      alert(\"Location not obtained\");\r\n    }\r\n  };\r\n  const successfulLookup = (position) => {\r\n    const { latitude, longitude } = position.coords;\r\n    fetch(\r\n      `https://api.opencagedata.com/geocode/v1/json?q=${latitude}+${longitude}&key=f3bbc576c3214ab584cc99f9922af93e`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => showLocation(data));\r\n  };\r\n  const failure = () => {\r\n    alert(\"Accesss denied\");\r\n  };\r\n\r\n  const showLocation = (data) => {\r\n    console.log(\r\n      data.results[0].annotations.timezone.name,\r\n      data.results[0].annotations.timezone.short_name\r\n    );\r\n\r\n    setLocation(data.results[0].annotations.timezone.name);\r\n    setTime_zone(data.results[0].annotations.timezone.short_name);\r\n    var month_list = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    var d = new Date();\r\n    var date = d.getDate();\r\n    var month = d.getMonth() + 1;\r\n    var year = d.getFullYear();\r\n    console.log(d.getFullYear());\r\n    console.log(d.getMonth() + 1);\r\n    console.log(d.getDate());\r\n    if (date < 10) {\r\n      date = \"0\" + date;\r\n    }\r\n    // if (month < 10) {\r\n    //   month = \"0\" + month;\r\n    // }\r\n    setDate(date + \" \" + month_list[month - 1] + \",\" + year);\r\n  };\r\n\r\n  return (\r\n    <div className=\"clock\" style={{ backgroundImage: `url(${background})` }}>\r\n      <div className=\"details_container\">\r\n        <h2>\r\n          <span className=\"icon\">{icon}</span> {greetings}, IT'S CURRENTLY NOW\r\n        </h2>\r\n        <div className=\"wrap\">\r\n          <span className=\"time_details\">\r\n            {hour}:{minutes}\r\n          </span>\r\n          <h1>{time_zone}</h1>\r\n        </div>\r\n        <span className=\"loc\"> IN {location},</span>\r\n        <br />\r\n        <span className=\"loc\">{date}</span>\r\n      </div>\r\n      <div className=\"quote\">\r\n        <div>\r\n          <big>\r\n            <b>\r\n              <q>\r\n                <i> {quotes} </i>\r\n              </q>\r\n            </b>\r\n          </big>\r\n          <br />\r\n          <h2>{speaker}</h2>\r\n        </div>\r\n\r\n        <span className=\"sl\">\r\n          <AiOutlineReload\r\n            id=\"rel\"\r\n            className=\"reload\"\r\n            onClick={getRandomQuotes}\r\n          />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Clock;\r\n","import Clock from \"./component/Clock\";\nimport \"./index.css\"; \nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}